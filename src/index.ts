import { FileHelper } from '@supernovaio/export-helpers';
import {
  Supernova,
  PulsarContext,
  RemoteVersionIdentifier,
  AnyOutputFile,
  TokenType,
  ColorToken,
  GradientToken,
  TypographyToken,
  ShadowToken,
} from '@supernovaio/sdk-exporters';
import { ExporterConfiguration } from '../config';
import { createColors } from './content/color-token';
import { createGradients } from './content/gradient-token';
import { createTypography } from './content/typography-token';
import { createShadows } from './content/shadow-token';

/**
 * Export entrypoint.
 * When running `export` through extensions or pipelines, this function will be called.
 * Context contains information about the design system and version that is currently being exported.
 */
Pulsar.export(async (sdk: Supernova, context: PulsarContext): Promise<Array<AnyOutputFile>> => {
  // Fetch data from design system that is currently being exported (context)
  const remoteVersionIdentifier: RemoteVersionIdentifier = {
    designSystemId: context.dsId,
    versionId: context.versionId,
  };

  // Fetch the necessary data
  let tokens = await sdk.tokens.getTokens(remoteVersionIdentifier);
  let tokenGroups = await sdk.tokens.getTokenGroups(remoteVersionIdentifier);

  const mappedTokens = new Map(tokens.map((token) => [token.id, token]));

  // Create SCSS file content
  let colorContent = createColors(
    tokens.filter((t) => t.tokenType === TokenType.color) as ColorToken[],
    mappedTokens,
    tokenGroups
  );
  let gradientContent = createGradients(
    tokens.filter((t) => t.tokenType === TokenType.gradient) as GradientToken[],
    mappedTokens,
    tokenGroups
  );
  let shadowContent = createShadows(
    tokens.filter((t) => t.tokenType === TokenType.shadow) as ShadowToken[],
    mappedTokens,
    tokenGroups
  );
  let typographyContent = createTypography(
    tokens.filter((t) => t.tokenType === TokenType.typography) as TypographyToken[],
    mappedTokens,
    tokenGroups
  );

  if (exportConfiguration.generateDisclaimer) {
    // Add disclaimer to every file if enabled
    colorContent = `/* This file was generated by Supernova, don't change by hand */\n${colorContent}`;
    gradientContent = `/* This file was generated by Supernova, don't change by hand */\n${gradientContent}`;
    shadowContent = `/* This file was generated by Supernova, don't change by hand */\n${shadowContent}`;
    typographyContent = `/* This file was generated by Supernova, don't change by hand */\n${typographyContent}`;
  }

  // Create output file and return it
  return [
    FileHelper.createTextFile({
      relativePath: './',
      fileName: 'colors.scss',
      content: colorContent,
    }),
    FileHelper.createTextFile({
      relativePath: './',
      fileName: 'gradients.scss',
      content: gradientContent,
    }),
    FileHelper.createTextFile({
      relativePath: './',
      fileName: 'shadows.scss',
      content: shadowContent,
    }),
    FileHelper.createTextFile({
      relativePath: './',
      fileName: 'typography.scss',
      content: typographyContent,
    }),
  ];
});

/** Exporter configuration. Adheres to the `ExporterConfiguration` interface and its content comes from the resolved default configuration + user overrides of various configuration keys */
export const exportConfiguration = Pulsar.exportConfig<ExporterConfiguration>();
